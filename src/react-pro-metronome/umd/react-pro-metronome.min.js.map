{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 36168429397f1b2fab9e","webpack:///./src/index.js","webpack:///external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack:///./node_modules/howler/dist/howler.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/sounds/click3.mp3","webpack:///./src/sounds/click3.ogg","webpack:///./src/sounds/click3.aac","webpack:///./src/sounds/click2.mp3","webpack:///./src/sounds/click2.ogg","webpack:///./src/sounds/click2.aac","webpack:///./src/sounds/click1.mp3","webpack:///./src/sounds/click1.ogg","webpack:///./src/sounds/click1.aac"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE_2__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","ProMetronome","state","qNote","subNote","clickSounds","__WEBPACK_IMPORTED_MODULE_1_howler__","src","__WEBPACK_IMPORTED_MODULE_8__sounds_click1_mp3___default","a","__WEBPACK_IMPORTED_MODULE_9__sounds_click1_ogg___default","__WEBPACK_IMPORTED_MODULE_10__sounds_click1_aac___default","preload","__WEBPACK_IMPORTED_MODULE_5__sounds_click2_mp3___default","__WEBPACK_IMPORTED_MODULE_6__sounds_click2_ogg___default","__WEBPACK_IMPORTED_MODULE_7__sounds_click2_aac___default","__WEBPACK_IMPORTED_MODULE_2__sounds_click3_mp3___default","__WEBPACK_IMPORTED_MODULE_3__sounds_click3_ogg___default","__WEBPACK_IMPORTED_MODULE_4__sounds_click3_aac___default","update","_this$props","_this","props","soundEnabled","soundPattern","subdivision","_this$state","length","soundLevel","charAt","play","setState","prevState","calculateInterval","bpm","Math","floor","componentDidMount","isPlaying","timerID","setInterval","componentWillReceiveProps","nextProps","clearInterval","componentWillUnmount","render","__WEBPACK_IMPORTED_MODULE_0_react__","defaultProps","__webpack_exports__","__WEBPACK_AMD_DEFINE_RESULT__","HowlerGlobal","init","Howler","_counter","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","window","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","mobileAutoEnable","_setup","volume","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","unload","close","codecs","ext","replace","_autoSuspend","Audio","oncanplaythrough","e","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","userAgent","match","isOldOpera","parseInt","split","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","mp4","weba","webm","dolby","flac","_enableMobileAudio","isMobile","test","isTouch","maxTouchPoints","msMaxTouchPoints","_mobileEnabled","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","document","removeEventListener","addEventListener","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","then","_resumeAfterSuspend","_emit","Howl","console","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","_rate","rate","_sprite","sprite","_src","undefined","_xhrWithCredentials","xhrWithCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onresume","push","event","action","load","url","str","exec","toLowerCase","warn","location","protocol","slice","Sound","loadBuffer","internal","id","num","_ended","_id","_inactiveSound","soundId","seek","max","_seek","duration","timeout","abs","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","Promise","_loadQueue","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","stop","noteOff","_cleanBuffer","isNaN","arguments","_interval","args","indexOf","apply","fade","from","to","len","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","Date","now","_fadeTo","tick","min","round","cancelScheduledValues","loopStart","loopEnd","realTime","playing","rateSeek","sounds","_errorFn","_loadFn","index","splice","remCache","cache","on","events","off","isId","keys","Array","isArray","msg","task","shift","ended","_drain","reset","limit","cnt","_panner","howl","_parent","parent","create","createGain","createGainNode","_errorListener","_loadListener","code","ceil","__default","loadSound","data","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","xhr","XMLHttpRequest","open","withCredentials","responseType","status","response","onerror","safeXhrSend","send","arraybuffer","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","standalone","global","_super","_pos","_orientation","stereo","pan","pos","x","y","z","setPosition","orientation","xUp","yUp","zUp","or","setOrientation","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner","g","Function","eval"],"mappings":";;;;CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,UACA,mBAAAC,eAAAC,IACAD,QAAA,SAAAJ,GACA,iBAAAC,QACAA,QAAA,kBAAAD,EAAAG,QAAA,UAEAJ,EAAA,kBAAAC,EAAAD,EAAA,OARA,CASC,oBAAAO,UAAAC,KAAA,SAAAC,GACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAV,QAGA,IAAAC,EAAAO,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAZ,YAUA,OANAa,EAAAH,GAAAI,KAAAb,EAAAD,QAAAC,IAAAD,QAAAS,GAGAR,EAAAW,GAAA,EAGAX,EAAAD,QAqCA,OAhCAS,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAjB,EAAAkB,EAAAC,GACAV,EAAAW,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAzB,GACA,IAAAkB,EAAAlB,KAAA0B,WACA,WAA2B,OAAA1B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAQ,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,OAAAR,OAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,8cC7CA,IAGMC,mQACJC,OACEC,MAAO,EACPC,QAAS,KAGXC,aACE,IAAIC,EAAA,MACFC,KAAMC,EAAAC,EAAoBC,EAAAD,EAAoBE,EAAAF,GAC9CG,SAAS,IAEX,IAAIN,EAAA,MACFC,KAAMM,EAAAJ,EAAoBK,EAAAL,EAAoBM,EAAAN,GAC9CG,SAAS,IAEX,IAAIN,EAAA,MACFC,KAAMS,EAAAP,EAAoBQ,EAAAR,EAAoBS,EAAAT,GAC9CG,SAAS,OAIbO,OAAS,WAAM,IAAAC,EACuCC,EAAKC,MAAjDC,EADKH,EACLG,aAAcC,EADTJ,EACSI,aAAcC,EADvBL,EACuBK,YADvBC,EAEcL,EAAKnB,MAAxBC,EAFKuB,EAELvB,MAAOC,EAFFsB,EAEEtB,QAEf,GAAImB,GAAgBC,EAAaG,SAAW,EAAIF,EAAa,CAC3D,IAAMG,EAAaJ,EAAaK,QAC7B1B,EAAQ,GAAKsB,EAAcrB,EAAU,GAEpCwB,EAAa,GAAKA,GAAc,GAClCP,EAAKhB,YAAYuB,EAAa,GAAGE,OAGjC1B,EAAUqB,EACZJ,EAAKU,SAAS,SAAAC,GAAA,OACZ5B,QAAS4B,EAAU5B,QAAU,KAG/BiB,EAAKU,SAAS,SAAAC,GAAA,OACZ7B,MAA2B,IAApB6B,EAAU7B,MAAc,EAAI6B,EAAU7B,MAAQ,EACrDC,QAAS,QAKf6B,kBAAoB,SAACC,EAAKT,GACxB,OAAOU,KAAKC,MAAM,KAASF,EAAMT,8VAGnCY,6BACMhE,KAAKiD,MAAMgB,YACbjE,KAAKkE,QAAUC,YACbnE,KAAK8C,OACL9C,KAAK4D,kBAAkB5D,KAAKiD,MAAMY,IAAK7D,KAAKiD,MAAMG,4BAKxDgB,mCAA0BC,GACpBA,EAAUJ,WAAajE,KAAKiD,MAAMgB,UAChCI,EAAUJ,UACZjE,KAAKkE,QAAUC,YACbnE,KAAK8C,OACL9C,KAAK4D,kBAAkBS,EAAUR,IAAKQ,EAAUjB,cAGlDkB,cAActE,KAAKkE,UAGrBG,EAAUJ,WACTI,EAAUR,KAAO7D,KAAKiD,MAAMY,KAC3BQ,EAAUjB,aAAepD,KAAKiD,MAAMG,cAEtCkB,cAActE,KAAKkE,SACnBlE,KAAKkE,QAAUC,YACbnE,KAAK8C,OACL9C,KAAK4D,kBAAkBS,EAAUR,IAAKQ,EAAUjB,4BAKtDmB,gCACED,cAActE,KAAKkE,sBAGrBM,kBACE,OAAOxE,KAAKiD,MAAMuB,OAAOxE,KAAKiD,MAAOjD,KAAK6B,WAtFnB4C,EAAA,eAoL3B7C,EAAa8C,cACXb,IAAK,GACLT,YAAa,EACba,WAAW,EACXf,cAAc,EACdC,aAAc,IAGhBwB,EAAA,yBC/MAhF,EAAAD,QAAAO,gCCAA,IAAA2E,GAUA,WAEA,aASA,IAAAC,EAAA,WACA7E,KAAA8E,QAEAD,EAAArD,WAKAsD,KAAA,WACA,IAAA/E,EAAAC,MAAA+E,EA0BA,OAvBAhF,EAAAiF,SAAA,IAGAjF,EAAAkF,WACAlF,EAAAmF,UACAnF,EAAAoF,QAAA,EACApF,EAAAqF,QAAA,EACArF,EAAAsF,cAAA,iBACAtF,EAAAuF,WAAA,oBAAAC,eAAAC,UAAAD,OAAAC,UAAA,KAGAzF,EAAA0F,WAAA,KACA1F,EAAA2F,SAAA,EACA3F,EAAA4F,eAAA,EACA5F,EAAA6F,aAAA,EACA7F,EAAA8F,IAAA,KAGA9F,EAAA+F,kBAAA,EAGA/F,EAAAgG,SAEAhG,GAQAiG,OAAA,SAAAC,GACA,IAAAlG,EAAAC,MAAA+E,EAQA,GAPAkB,EAAAC,WAAAD,GAGAlG,EAAA8F,KACAM,SAGA,IAAAF,MAAA,GAAAA,GAAA,GAIA,GAHAlG,EAAAqF,QAAAa,EAGAlG,EAAAoF,OACA,OAAApF,EAIAA,EAAA4F,eACA5F,EAAA0F,WAAAW,KAAAC,eAAAJ,EAAAlB,EAAAc,IAAAS,aAIA,QAAAjG,EAAA,EAAqBA,EAAAN,EAAAmF,OAAA5B,OAAsBjD,IAC3C,IAAAN,EAAAmF,OAAA7E,GAAAkG,UAKA,IAHA,IAAAC,EAAAzG,EAAAmF,OAAA7E,GAAAoG,eAGAC,EAAA,EAAyBA,EAAAF,EAAAlD,OAAcoD,IAAA,CACvC,IAAAC,EAAA5G,EAAAmF,OAAA7E,GAAAuG,WAAAJ,EAAAE,IAEAC,KAAAE,QACAF,EAAAE,MAAAb,OAAAW,EAAAvB,QAAAa,GAMA,OAAAlG,EAGA,OAAAA,EAAAqF,SAOA0B,KAAA,SAAAC,GACA,IAAAhH,EAAAC,MAAA+E,EAGAhF,EAAA8F,KACAM,IAGApG,EAAAoF,OAAA4B,EAGAhH,EAAA4F,eACA5F,EAAA0F,WAAAW,KAAAC,eAAAU,EAAA,EAAAhH,EAAAqF,QAAAL,EAAAc,IAAAS,aAIA,QAAAjG,EAAA,EAAmBA,EAAAN,EAAAmF,OAAA5B,OAAsBjD,IACzC,IAAAN,EAAAmF,OAAA7E,GAAAkG,UAKA,IAHA,IAAAC,EAAAzG,EAAAmF,OAAA7E,GAAAoG,eAGAC,EAAA,EAAuBA,EAAAF,EAAAlD,OAAcoD,IAAA,CACrC,IAAAC,EAAA5G,EAAAmF,OAAA7E,GAAAuG,WAAAJ,EAAAE,IAEAC,KAAAE,QACAF,EAAAE,MAAAE,QAAA,GAAAJ,EAAAxB,QAMA,OAAApF,GAOAiH,OAAA,WAGA,IAFA,IAAAjH,EAAAC,MAAA+E,EAEA1E,EAAAN,EAAAmF,OAAA5B,OAAA,EAAsCjD,GAAA,EAAMA,IAC5CN,EAAAmF,OAAA7E,GAAA2G,SAUA,OANAjH,EAAA4F,eAAA5F,EAAA8F,UAAA,IAAA9F,EAAA8F,IAAAoB,QACAlH,EAAA8F,IAAAoB,QACAlH,EAAA8F,IAAA,KACAM,KAGApG,GAQAmH,OAAA,SAAAC,GACA,OAAAnH,MAAA+E,GAAAE,QAAAkC,EAAAC,QAAA,YAOArB,OAAA,WACA,IAAAhG,EAAAC,MAAA+E,EASA,GANAhF,EAAA8B,MAAA9B,EAAA8F,KAAA9F,EAAA8F,IAAAhE,OAAA,UAGA9B,EAAAsH,gBAGAtH,EAAA4F,cAEA,uBAAA2B,MACA,SAIA,KAHA,IAAAA,OAGAC,mBACAxH,EAAAsF,cAAA,WAEW,MAAAmC,GACXzH,EAAA2F,SAAA,OAGA3F,EAAA2F,SAAA,EAKA,KACA,IAAA4B,OACAP,QACAhH,EAAA2F,SAAA,GAEO,MAAA8B,IAOP,OAJAzH,EAAA2F,SACA3F,EAAA0H,eAGA1H,GAOA0H,aAAA,WACA,IAAA1H,EAAAC,MAAA+E,EACA2C,EAAA,KAGA,IACAA,EAAA,oBAAAJ,MAAA,IAAAA,MAAA,KACO,MAAAK,GACP,OAAA5H,EAGA,IAAA2H,GAAA,mBAAAA,EAAAE,YACA,OAAA7H,EAGA,IAAA8H,EAAAH,EAAAE,YAAA,eAAuDR,QAAA,WAGvDU,EAAA/H,EAAAuF,YAAAvF,EAAAuF,WAAAyC,UAAAC,MAAA,kBACAC,EAAAH,GAAAI,SAAAJ,EAAA,GAAAK,MAAA,eAmBA,OAjBApI,EAAAkF,SACAmD,MAAAH,IAAAJ,IAAAH,EAAAE,YAAA,cAA6ER,QAAA,YAC7EiB,OAAAR,EACAS,OAAAZ,EAAAE,YAAA,4BAAiDR,QAAA,WACjDmB,MAAAb,EAAAE,YAAA,8BAAgDR,QAAA,WAChDoB,MAAAd,EAAAE,YAAA,8BAAgDR,QAAA,WAChDqB,MAAAf,EAAAE,YAAA,yBAAgDR,QAAA,WAChDsB,MAAAhB,EAAAE,YAAA,cAAgDR,QAAA,WAChDuB,MAAAjB,EAAAE,YAAA,gBAAkDR,QAAA,WAClDwB,OAAAlB,EAAAE,YAAA,iBAAmDF,EAAAE,YAAA,eAAuCF,EAAAE,YAAA,eAAuCR,QAAA,WACjIyB,OAAAnB,EAAAE,YAAA,iBAAmDF,EAAAE,YAAA,eAAuCF,EAAAE,YAAA,eAAuCR,QAAA,WACjI0B,OAAApB,EAAAE,YAAA,+BAAkDR,QAAA,WAClD2B,OAAArB,EAAAE,YAAA,+BAAkDR,QAAA,WAClD4B,QAAAtB,EAAAE,YAAA,4BAAkDR,QAAA,WAClD6B,QAAAvB,EAAAE,YAAA,kBAAqDF,EAAAE,YAAA,gBAAwCR,QAAA,YAG7FrH,GASAmJ,mBAAA,WACA,IAAAnJ,EAAAC,MAAA+E,EAGAoE,EAAA,sDAAAC,KAAArJ,EAAAuF,YAAAvF,EAAAuF,WAAAyC,WACAsB,KAAA,eAAA9D,QAAAxF,EAAAuF,YAAAvF,EAAAuF,WAAAgE,eAAA,GAAAvJ,EAAAuF,YAAAvF,EAAAuF,WAAAiE,iBAAA,GACA,IAAAxJ,EAAAyJ,gBAAAzJ,EAAA8F,MAAAsD,GAAAE,GAAA,CAIAtJ,EAAAyJ,gBAAA,EAKAzJ,EAAA0J,iBAAA,QAAA1J,EAAA8F,IAAA6D,aACA3J,EAAA0J,iBAAA,EACA1J,EAAAiH,UAKAjH,EAAA4J,eAAA5J,EAAA8F,IAAA+D,aAAA,WAKA,IAAAC,EAAA,WAEA9E,EAAA+E,cAGA,IAAAC,EAAAhK,EAAA8F,IAAAmE,qBACAD,EAAAE,OAAAlK,EAAA4J,eACAI,EAAAG,QAAAnK,EAAA8F,IAAAsE,kBAGA,IAAAJ,EAAAK,MACAL,EAAAM,OAAA,GAEAN,EAAAK,MAAA,GAIA,mBAAArK,EAAA8F,IAAAyE,QACAvK,EAAA8F,IAAAyE,SAIAP,EAAAQ,QAAA,WACAR,EAAAS,WAAA,GAGAzK,EAAAyJ,gBAAA,EACAzJ,EAAA+F,kBAAA,EAGA2E,SAAAC,oBAAA,aAAAb,GAAA,GACAY,SAAAC,oBAAA,WAAAb,GAAA,KAQA,OAHAY,SAAAE,iBAAA,aAAAd,GAAA,GACAY,SAAAE,iBAAA,WAAAd,GAAA,GAEA9J,IAQAsH,aAAA,WACA,IAAAtH,EAAAC,KAEA,GAAAD,EAAA6F,aAAA7F,EAAA8F,UAAA,IAAA9F,EAAA8F,IAAA+E,SAAA7F,EAAAY,cAAA,CAKA,QAAAtF,EAAA,EAAmBA,EAAAN,EAAAmF,OAAA5B,OAAsBjD,IACzC,GAAAN,EAAAmF,OAAA7E,GAAAkG,UACA,QAAAG,EAAA,EAAuBA,EAAA3G,EAAAmF,OAAA7E,GAAAwK,QAAAvH,OAAiCoD,IACxD,IAAA3G,EAAAmF,OAAA7E,GAAAwK,QAAAnE,GAAAoE,QACA,OAAA/K,EA4BA,OAtBAA,EAAAgL,eACAC,aAAAjL,EAAAgL,eAIAhL,EAAAgL,cAAAE,WAAA,WACAlL,EAAA6F,cAIA7F,EAAAgL,cAAA,KACAhL,EAAA8B,MAAA,aACA9B,EAAA8F,IAAA+E,UAAAM,KAAA,WACAnL,EAAA8B,MAAA,YAEA9B,EAAAoL,6BACApL,EAAAoL,oBACApL,EAAA+J,mBAGO,KAEP/J,IAOA+J,YAAA,WACA,IAAA/J,EAAAC,KAEA,GAAAD,EAAA8F,UAAA,IAAA9F,EAAA8F,IAAAyE,QAAAvF,EAAAY,cAyBA,MArBA,YAAA5F,EAAA8B,OAAA9B,EAAAgL,eACAC,aAAAjL,EAAAgL,eACAhL,EAAAgL,cAAA,MACO,cAAAhL,EAAA8B,OACP9B,EAAA8F,IAAAyE,SAAAY,KAAA,WACAnL,EAAA8B,MAAA,UAGA,QAAAxB,EAAA,EAAuBA,EAAAN,EAAAmF,OAAA5B,OAAsBjD,IAC7CN,EAAAmF,OAAA7E,GAAA+K,MAAA,YAIArL,EAAAgL,gBACAC,aAAAjL,EAAAgL,eACAhL,EAAAgL,cAAA,OAEO,eAAAhL,EAAA8B,QACP9B,EAAAoL,qBAAA,GAGApL,IAKA,IAAAgF,EAAA,IAAAF,EASAwG,EAAA,SAAAvK,GAIAA,EAAAoB,KAAA,IAAApB,EAAAoB,IAAAoB,OAHAtD,KAQA8E,KAAAhE,GAJAwK,QAAAC,MAAA,+DAMAF,EAAA7J,WAMAsD,KAAA,SAAAhE,GACA,IAAAf,EAAAC,KAsEA,OAnEA+E,EAAAc,KACAM,IAIApG,EAAAyL,UAAA1K,EAAA2K,WAAA,EACA1L,EAAA2L,QAAA,iBAAA5K,EAAA6K,OAAA7K,EAAA6K,QAAA7K,EAAA6K,QACA5L,EAAA6L,OAAA9K,EAAA+K,QAAA,EACA9L,EAAAoF,OAAArE,EAAAgG,OAAA,EACA/G,EAAA+L,MAAAhL,EAAAiL,OAAA,EACAhM,EAAAiM,MAAAlL,EAAAmL,MAAA,EACAlM,EAAAmM,SAAA,kBAAApL,EAAAyB,SAAAzB,EAAAyB,QACAxC,EAAAoM,MAAArL,EAAAsL,MAAA,EACArM,EAAAsM,QAAAvL,EAAAwL,WACAvM,EAAAwM,KAAA,iBAAAzL,EAAAoB,IAAApB,EAAAoB,KAAApB,EAAAoB,KACAnC,EAAAqF,aAAAoH,IAAA1L,EAAAkF,OAAAlF,EAAAkF,OAAA,EACAjG,EAAA0M,oBAAA3L,EAAA4L,qBAAA,EAGA3M,EAAA4M,UAAA,EACA5M,EAAA6M,OAAA,WACA7M,EAAA8K,WACA9K,EAAA8M,cACA9M,EAAA+M,UACA/M,EAAAgN,WAAA,EAGAhN,EAAAiN,OAAAlM,EAAAmM,QAAgCC,GAAApM,EAAAmM,WAChClN,EAAAoN,QAAArM,EAAAsM,SAAkCF,GAAApM,EAAAsM,YAClCrN,EAAAsN,QAAAvM,EAAAwM,SAAkCJ,GAAApM,EAAAwM,YAClCvN,EAAAwN,aAAAzM,EAAA0M,cAA4CN,GAAApM,EAAA0M,iBAC5CzN,EAAA0N,aAAA3M,EAAA4M,cAA4CR,GAAApM,EAAA4M,iBAC5C3N,EAAA4N,SAAA7M,EAAA8M,UAAoCV,GAAApM,EAAA8M,aACpC7N,EAAA8N,QAAA/M,EAAAgN,SAAkCZ,GAAApM,EAAAgN,YAClC/N,EAAAgO,QAAAjN,EAAAkN,SAAkCd,GAAApM,EAAAkN,YAClCjO,EAAAkO,QAAAnN,EAAAoN,SAAkChB,GAAApM,EAAAoN,YAClCnO,EAAAoO,UAAArN,EAAAsN,WAAsClB,GAAApM,EAAAsN,cACtCrO,EAAAsO,QAAAvN,EAAAwN,SAAkCpB,GAAApM,EAAAwN,YAClCvO,EAAAwO,QAAAzN,EAAA0N,SAAkCtB,GAAApM,EAAA0N,YAClCzO,EAAA0O,aAGA1O,EAAAwG,UAAAxB,EAAAY,gBAAA5F,EAAA6L,YAGA,IAAA7G,EAAAc,KAAAd,EAAAc,KAAAd,EAAAe,kBACAf,EAAAmE,qBAIAnE,EAAAG,OAAAwJ,KAAA3O,GAGAA,EAAAyL,WACAzL,EAAA+M,OAAA4B,MACAC,MAAA,OACAC,OAAA,WACA7O,EAAA0D,UAMA1D,EAAAmM,UACAnM,EAAA8O,OAGA9O,GAOA8O,KAAA,WACA,IACAC,EAAA,KAGA,GAAA/J,EAAAW,QAJA1F,KAKAoL,MAAA,0CADA,CAMA,iBAVApL,KAUAuM,OAVAvM,KAWAuM,MAXAvM,KAWAuM,OAIA,QAAAlM,EAAA,EAAmBA,EAfnBL,KAemBuM,KAAAjJ,OAAoBjD,IAAA,CACvC,IAAA8G,EAAA4H,EAEA,GAlBA/O,KAkBA0L,SAlBA1L,KAkBA0L,QAAArL,GAEA8G,EApBAnH,KAoBA0L,QAAArL,OACS,CAGT,oBADA0O,EAvBA/O,KAuBAuM,KAAAlM,IACA,CAxBAL,KAyBAoL,MAAA,2EACA,UAIAjE,EAAA,0BAAuC6H,KAAAD,MAEvC5H,EAAA,aAAA6H,KAAAD,EAAA5G,MAAA,YAGAhB,IACAA,IAAA,GAAA8H,eAUA,GALA9H,GACAmE,QAAA4D,KAAA,8FAIA/H,GAAApC,EAAAmC,OAAAC,GAAA,CACA2H,EA/CA9O,KA+CAuM,KAAAlM,GACA,OAIA,GAAAyO,EAuBA,OA3EA9O,KAyDAuM,KAAAuC,EAzDA9O,KA0DA4M,OAAA,UAIA,WAAArH,OAAA4J,SAAAC,UAAA,UAAAN,EAAAO,MAAA,OA9DArP,KA+DA4L,QAAA,EA/DA5L,KAgEAuG,WAAA,GAIA,IAAA+I,EApEAtP,WAuEAuG,WACAgJ,EAxEAvP,gBAqDAoL,MAAA,mEA+BA3H,KAAA,SAAA6I,EAAAkD,GACA,IAAAzP,EAAAC,KACAyP,EAAA,KAGA,oBAAAnD,EACAmD,EAAAnD,EACAA,EAAA,SACO,qBAAAA,GAAA,WAAAvM,EAAA6M,SAAA7M,EAAAsM,QAAAC,GAEP,YACO,YAAAA,EAAA,CAEPA,EAAA,YAKA,IADA,IAAAoD,EAAA,EACArP,EAAA,EAAqBA,EAAAN,EAAA8K,QAAAvH,OAAuBjD,IAC5CN,EAAA8K,QAAAxK,GAAAyK,UAAA/K,EAAA8K,QAAAxK,GAAAsP,SACAD,IACAD,EAAA1P,EAAA8K,QAAAxK,GAAAuP,KAIA,IAAAF,EACApD,EAAA,KAEAmD,EAAA,MAKA,IAAA9I,EAAA8I,EAAA1P,EAAA6G,WAAA6I,GAAA1P,EAAA8P,iBAGA,IAAAlJ,EACA,YAWA,GAPA8I,IAAAnD,IACAA,EAAA3F,EAAA0F,SAAA,aAMA,WAAAtM,EAAA6M,OAAA,CAEAjG,EAAA0F,QAAAC,EAGA3F,EAAAgJ,QAAA,EAGA,IAAAG,EAAAnJ,EAAAiJ,IAQA,OAPA7P,EAAA+M,OAAA4B,MACAC,MAAA,OACAC,OAAA,WACA7O,EAAA0D,KAAAqM,MAIAA,EAIA,GAAAL,IAAA9I,EAAAmE,QAQA,OANA0E,GACAvE,WAAA,WACAlL,EAAAqL,MAAA,OAAAzE,EAAAiJ,MACW,GAGXjJ,EAAAiJ,IAIA7P,EAAAwG,WACAxB,EAAA+E,cAIA,IAAAiG,EAAAjM,KAAAkM,IAAA,EAAArJ,EAAAsJ,MAAA,EAAAtJ,EAAAsJ,MAAAlQ,EAAAsM,QAAAC,GAAA,QACA4D,EAAApM,KAAAkM,IAAA,GAAAjQ,EAAAsM,QAAAC,GAAA,GAAAvM,EAAAsM,QAAAC,GAAA,QAAAyD,GACAI,EAAA,IAAAD,EAAApM,KAAAsM,IAAAzJ,EAAAwF,OAGAxF,EAAAmE,SAAA,EACAnE,EAAAgJ,QAAA,EACAhJ,EAAA0F,QAAAC,EACA3F,EAAAsJ,MAAAF,EACApJ,EAAA0J,OAAAtQ,EAAAsM,QAAAC,GAAA,OACA3F,EAAA2J,OAAAvQ,EAAAsM,QAAAC,GAAA,GAAAvM,EAAAsM,QAAAC,GAAA,QACA3F,EAAAmF,SAAAnF,EAAAmF,QAAA/L,EAAAsM,QAAAC,GAAA,IAGA,IAAAiE,EAAA5J,EAAAE,MACA,GAAA9G,EAAAwG,UAAA,CAEA,IAAAiK,EAAA,WACAzQ,EAAA0Q,eAAA9J,GAGA,IAAAV,EAAAU,EAAAxB,QAAApF,EAAAoF,OAAA,EAAAwB,EAAAvB,QACAmL,EAAAnK,KAAAC,eAAAJ,EAAAlB,EAAAc,IAAAS,aACAK,EAAA+J,WAAA3L,EAAAc,IAAAS,iBAGA,IAAAiK,EAAAI,aAAAvG,MACAzD,EAAAmF,MAAAyE,EAAAI,aAAAC,YAAA,EAAAb,EAAA,OAAAQ,EAAAI,aAAAC,YAAA,EAAAb,EAAAG,GAEAvJ,EAAAmF,MAAAyE,EAAAI,aAAAvG,MAAA,EAAA2F,EAAA,OAAAQ,EAAAI,aAAAvG,MAAA,EAAA2F,EAAAG,GAIAC,IAAAU,MACA9Q,EAAA8M,WAAAlG,EAAAiJ,KAAA3E,WAAAlL,EAAA4P,OAAAmB,KAAA/Q,EAAA4G,GAAAwJ,IAGAX,GACAvE,WAAA,WACAlL,EAAAqL,MAAA,OAAAzE,EAAAiJ,MACa,IAIb,YAAA7K,EAAAlD,MACA2O,KAEAzQ,EAAAgR,KAAA,SAAAP,GAGAzQ,EAAAiR,YAAArK,EAAAiJ,UAEO,CAEP,IAAAqB,EAAA,WACAV,EAAAjK,YAAAyJ,EACAQ,EAAAxJ,MAAAJ,EAAAxB,QAAApF,EAAAoF,QAAAJ,EAAAI,QAAAoL,EAAAxJ,MACAwJ,EAAAvK,OAAAW,EAAAvB,QAAAL,EAAAiB,SACAuK,EAAAW,aAAAvK,EAAAwF,MAGA,IACA,IAAA1I,EAAA8M,EAAA9M,OAeA,GAZA,oBAAA0N,SAAA1N,aAAA0N,UAEApR,EAAAgN,WAAA,EAGAtJ,EAAAyH,KAAA,WACAnL,EAAAgN,WAAA,EACAhN,EAAAqR,gBAKAb,EAAAc,OAGA,YAFAtR,EAAAqL,MAAA,YAAAzE,EAAAiJ,IAAA,oIAMAO,IAAAU,MACA9Q,EAAA8M,WAAAlG,EAAAiJ,KAAA3E,WAAAlL,EAAA4P,OAAAmB,KAAA/Q,EAAA4G,GAAAwJ,IAGAX,GACAzP,EAAAqL,MAAA,OAAAzE,EAAAiJ,KAEW,MAAAjI,GACX5H,EAAAqL,MAAA,YAAAzE,EAAAiJ,IAAAjI,KAKA2J,EAAA/L,eAAAgM,SAAAhB,EAAAiB,YAAAzM,EAAAO,WAAAmM,WACA,OAAAlB,EAAAiB,YAAAF,EACAL,QACS,CACT,IAAAS,EAAA,WAEAT,IAGAV,EAAA7F,oBAAA3F,EAAAM,cAAAqM,GAAA,IAEAnB,EAAA5F,iBAAA5F,EAAAM,cAAAqM,GAAA,GAGA3R,EAAAiR,YAAArK,EAAAiJ,MAIA,OAAAjJ,EAAAiJ,KAQA+B,MAAA,SAAAlC,GACA,IAAA1P,EAAAC,KAGA,cAAAD,EAAA6M,QAAA7M,EAAAgN,UAQA,OAPAhN,EAAA+M,OAAA4B,MACAC,MAAA,QACAC,OAAA,WACA7O,EAAA4R,MAAAlC,MAIA1P,EAMA,IAFA,IAAAyG,EAAAzG,EAAA0G,aAAAgJ,GAEApP,EAAA,EAAmBA,EAAAmG,EAAAlD,OAAcjD,IAAA,CAEjCN,EAAAiR,YAAAxK,EAAAnG,IAGA,IAAAsG,EAAA5G,EAAA6G,WAAAJ,EAAAnG,IAEA,GAAAsG,MAAAmE,UAEAnE,EAAAsJ,MAAAlQ,EAAAgQ,KAAAvJ,EAAAnG,IACAsG,EAAAiL,UAAA,EACAjL,EAAAmE,SAAA,EAGA/K,EAAA8R,UAAArL,EAAAnG,IAEAsG,EAAAE,OACA,GAAA9G,EAAAwG,UAAA,CAEA,IAAAI,EAAAE,MAAA8J,aACA,cAGA,IAAAhK,EAAAE,MAAA8J,aAAAmB,KACAnL,EAAAE,MAAA8J,aAAAoB,QAAA,GAEApL,EAAAE,MAAA8J,aAAAmB,KAAA,GAIA/R,EAAAiS,aAAArL,EAAAE,YACaoL,MAAAtL,EAAAE,MAAAqJ,WAAAvJ,EAAAE,MAAAqJ,WAAAW,KACblK,EAAAE,MAAA8K,QAMAO,UAAA,IACAnS,EAAAqL,MAAA,QAAAzE,IAAAiJ,IAAA,MAIA,OAAA7P,GASA+R,KAAA,SAAArC,EAAAD,GACA,IAAAzP,EAAAC,KAGA,cAAAD,EAAA6M,OAQA,OAPA7M,EAAA+M,OAAA4B,MACAC,MAAA,OACAC,OAAA,WACA7O,EAAA+R,KAAArC,MAIA1P,EAMA,IAFA,IAAAyG,EAAAzG,EAAA0G,aAAAgJ,GAEApP,EAAA,EAAmBA,EAAAmG,EAAAlD,OAAcjD,IAAA,CAEjCN,EAAAiR,YAAAxK,EAAAnG,IAGA,IAAAsG,EAAA5G,EAAA6G,WAAAJ,EAAAnG,IAEAsG,IAEAA,EAAAsJ,MAAAtJ,EAAA0J,QAAA,EACA1J,EAAAiL,UAAA,EACAjL,EAAAmE,SAAA,EACAnE,EAAAgJ,QAAA,EAGA5P,EAAA8R,UAAArL,EAAAnG,IAEAsG,EAAAE,QACA9G,EAAAwG,UAEAI,EAAAE,MAAA8J,oBACA,IAAAhK,EAAAE,MAAA8J,aAAAmB,KACAnL,EAAAE,MAAA8J,aAAAoB,QAAA,GAEApL,EAAAE,MAAA8J,aAAAmB,KAAA,GAIA/R,EAAAiS,aAAArL,EAAAE,QAEaoL,MAAAtL,EAAAE,MAAAqJ,WAAAvJ,EAAAE,MAAAqJ,WAAAW,MACblK,EAAAE,MAAAP,YAAAK,EAAA0J,QAAA,EACA1J,EAAAE,MAAA8K,UAIAnC,GACAzP,EAAAqL,MAAA,OAAAzE,EAAAiJ,MAKA,OAAA7P,GASA+G,KAAA,SAAAC,EAAA0I,GACA,IAAA1P,EAAAC,KAGA,cAAAD,EAAA6M,OAQA,OAPA7M,EAAA+M,OAAA4B,MACAC,MAAA,OACAC,OAAA,WACA7O,EAAA+G,KAAAC,EAAA0I,MAIA1P,EAIA,YAAA0P,EAAA,CACA,qBAAA1I,EAGA,OAAAhH,EAAAoF,OAFApF,EAAAoF,OAAA4B,EASA,IAFA,IAAAP,EAAAzG,EAAA0G,aAAAgJ,GAEApP,EAAA,EAAmBA,EAAAmG,EAAAlD,OAAcjD,IAAA,CAEjC,IAAAsG,EAAA5G,EAAA6G,WAAAJ,EAAAnG,IAEAsG,IACAA,EAAAxB,OAAA4B,EAGAJ,EAAAwL,WACApS,EAAA8R,UAAAlL,EAAAiJ,KAGA7P,EAAAwG,WAAAI,EAAAE,MACAF,EAAAE,MAAAT,KAAAC,eAAAU,EAAA,EAAAJ,EAAAvB,QAAAL,EAAAc,IAAAS,aACWK,EAAAE,QACXF,EAAAE,MAAAE,QAAAhC,EAAAI,QAAA4B,GAGAhH,EAAAqL,MAAA,OAAAzE,EAAAiJ,MAIA,OAAA7P,GAWAiG,OAAA,WACA,IAEAC,EAAAwJ,EAqBA9I,EAvBA5G,EAAAC,KACAoS,EAAAF,UAIA,OAAAE,EAAA9O,OAEA,OAAAvD,EAAAqF,QAiBA,GAhBO,IAAAgN,EAAA9O,QAAA,IAAA8O,EAAA9O,aAAA,IAAA8O,EAAA,GAEPrS,EAAA0G,eACA4L,QAAAD,EAAA,KACA,EACA3C,EAAAvH,SAAAkK,EAAA,OAEAnM,EAAAC,WAAAkM,EAAA,IAEOA,EAAA9O,QAAA,IACP2C,EAAAC,WAAAkM,EAAA,IACA3C,EAAAvH,SAAAkK,EAAA,eAKA,IAAAnM,MAAA,GAAAA,GAAA,GA2CA,OADAU,EAAA8I,EAAA1P,EAAA6G,WAAA6I,GAAA1P,EAAA8K,QAAA,IACAlE,EAAAvB,QAAA,EAzCA,cAAArF,EAAA6M,OAQA,OAPA7M,EAAA+M,OAAA4B,MACAC,MAAA,SACAC,OAAA,WACA7O,EAAAiG,OAAAsM,MAAAvS,EAAAqS,MAIArS,OAIA,IAAA0P,IACA1P,EAAAqF,QAAAa,GAIAwJ,EAAA1P,EAAA0G,aAAAgJ,GACA,QAAApP,EAAA,EAAqBA,EAAAoP,EAAAnM,OAAajD,KAElCsG,EAAA5G,EAAA6G,WAAA6I,EAAApP,OAGAsG,EAAAvB,QAAAa,EAGAmM,EAAA,IACArS,EAAA8R,UAAApC,EAAApP,IAGAN,EAAAwG,WAAAI,EAAAE,QAAAF,EAAAxB,OACAwB,EAAAE,MAAAT,KAAAC,eAAAJ,EAAAlB,EAAAc,IAAAS,aACaK,EAAAE,QAAAF,EAAAxB,SACbwB,EAAAE,MAAAb,OAAAC,EAAAlB,EAAAiB,UAGAjG,EAAAqL,MAAA,SAAAzE,EAAAiJ,MAQA,OAAA7P,GAWAwS,KAAA,SAAAC,EAAAC,EAAAC,EAAAjD,GACA,IAAA1P,EAAAC,KAGA,cAAAD,EAAA6M,OAQA,OAPA7M,EAAA+M,OAAA4B,MACAC,MAAA,OACAC,OAAA,WACA7O,EAAAwS,KAAAC,EAAAC,EAAAC,EAAAjD,MAIA1P,EAIAA,EAAAiG,OAAAwM,EAAA/C,GAIA,IADA,IAAAjJ,EAAAzG,EAAA0G,aAAAgJ,GACApP,EAAA,EAAmBA,EAAAmG,EAAAlD,OAAcjD,IAAA,CAEjC,IAAAsG,EAAA5G,EAAA6G,WAAAJ,EAAAnG,IAGA,GAAAsG,EAAA,CAOA,GALA8I,GACA1P,EAAA8R,UAAArL,EAAAnG,IAIAN,EAAAwG,YAAAI,EAAAxB,OAAA,CACA,IAAAmB,EAAAvB,EAAAc,IAAAS,YACAqM,EAAArM,EAAAoM,EAAA,IACA/L,EAAAvB,QAAAoN,EACA7L,EAAAE,MAAAT,KAAAC,eAAAmM,EAAAlM,GACAK,EAAAE,MAAAT,KAAAwM,wBAAAH,EAAAE,GAGA5S,EAAA8S,mBAAAlM,EAAA6L,EAAAC,EAAAC,EAAAlM,EAAAnG,QAAA,IAAAoP,IAIA,OAAA1P,GAYA8S,mBAAA,SAAAlM,EAAA6L,EAAAC,EAAAC,EAAAjD,EAAAqD,GACA,IAAA/S,EAAAC,KACAiG,EAAAuM,EACAO,EAAAN,EAAAD,EACAQ,EAAAlP,KAAAsM,IAAA2C,EAAA,KACAE,EAAAnP,KAAAkM,IAAA,EAAAgD,EAAA,EAAAN,EAAAM,EAAAN,GACAQ,EAAAC,KAAAC,MAGAzM,EAAA0M,QAAAZ,EAGA9L,EAAAwL,UAAAhO,YAAA,WAEA,IAAAmP,GAAAH,KAAAC,MAAAF,GAAAR,EACAQ,EAAAC,KAAAC,MACAnN,GAAA8M,EAAAO,EAGArN,EAAAnC,KAAAkM,IAAA,EAAA/J,GACAA,EAAAnC,KAAAyP,IAAA,EAAAtN,GAGAA,EAAAnC,KAAA0P,MAAA,IAAAvN,GAAA,IAGAlG,EAAAwG,UACAI,EAAAvB,QAAAa,EAEAlG,EAAAiG,OAAAC,EAAAU,EAAAiJ,KAAA,GAIAkD,IACA/S,EAAAqF,QAAAa,IAIAwM,EAAAD,GAAAvM,GAAAwM,KAAAD,GAAAvM,GAAAwM,KACAnO,cAAAqC,EAAAwL,WACAxL,EAAAwL,UAAA,KACAxL,EAAA0M,QAAA,KACAtT,EAAAiG,OAAAyM,EAAA9L,EAAAiJ,KACA7P,EAAAqL,MAAA,OAAAzE,EAAAiJ,OAEOqD,IASPpB,UAAA,SAAApC,GACA,IACA9I,EADA3G,KACA4G,WAAA6I,GAcA,OAZA9I,KAAAwL,YAHAnS,KAIAuG,WACAI,EAAAE,MAAAT,KAAAqN,sBAAA1O,EAAAc,IAAAS,aAGAhC,cAAAqC,EAAAwL,WACAxL,EAAAwL,UAAA,KATAnS,KAUAgG,OAAAW,EAAA0M,QAAA5D,GACA9I,EAAA0M,QAAA,KAXArT,KAYAoL,MAAA,OAAAqE,IAZAzP,MA0BA+L,KAAA,WACA,IAEAA,EAAA0D,EAAA9I,EADAyL,EAAAF,UAIA,OAAAE,EAAA9O,OAEA,OAPAtD,KAOA8L,MACO,OAAAsG,EAAA9O,OAAA,CACP,qBAAA8O,EAAA,GAMA,SADAzL,EAdA3G,KAcA4G,WAAAsB,SAAAkK,EAAA,UACAzL,EAAAmF,MALAC,EAAAqG,EAAA,GAVApS,KAWA8L,MAAAC,OAMO,IAAAqG,EAAA9O,SACPyI,EAAAqG,EAAA,GACA3C,EAAAvH,SAAAkK,EAAA,QAKA,IADA,IAAA5L,EAvBAxG,KAuBAyG,aAAAgJ,GACApP,EAAA,EAAmBA,EAAAmG,EAAAlD,OAAcjD,KACjCsG,EAzBA3G,KAyBA4G,WAAAJ,EAAAnG,OAGAsG,EAAAmF,MAAAC,EA5BA/L,KA6BAuG,WAAAI,EAAAE,OAAAF,EAAAE,MAAA8J,eACAhK,EAAAE,MAAA8J,aAAA5E,OACAA,IACApF,EAAAE,MAAA8J,aAAA+C,UAAA/M,EAAA0J,QAAA,EACA1J,EAAAE,MAAA8J,aAAAgD,QAAAhN,EAAA2J,SAMA,OAvCAtQ,MAkDAoM,KAAA,WACA,IAEAA,EAAAqD,EAqBA9I,EAvBA5G,EAAAC,KACAoS,EAAAF,UAIA,OAAAE,EAAA9O,OAEAmM,EAAA1P,EAAA8K,QAAA,GAAA+E,SACO,OAAAwC,EAAA9O,OAAA,CAEPvD,EAAA0G,eACA4L,QAAAD,EAAA,KACA,EACA3C,EAAAvH,SAAAkK,EAAA,OAEAhG,EAAAlG,WAAAkM,EAAA,SAEO,IAAAA,EAAA9O,SACP8I,EAAAlG,WAAAkM,EAAA,IACA3C,EAAAvH,SAAAkK,EAAA,QAKA,oBAAAhG,EAsDA,OADAzF,EAAA5G,EAAA6G,WAAA6I,IACA9I,EAAAwF,MAAApM,EAAAoM,MApDA,cAAApM,EAAA6M,OAQA,OAPA7M,EAAA+M,OAAA4B,MACAC,MAAA,OACAC,OAAA,WACA7O,EAAAqM,KAAAkG,MAAAvS,EAAAqS,MAIArS,OAIA,IAAA0P,IACA1P,EAAAoM,MAAAC,GAIAqD,EAAA1P,EAAA0G,aAAAgJ,GACA,QAAApP,EAAA,EAAqBA,EAAAoP,EAAAnM,OAAajD,IAIlC,GAFAsG,EAAA5G,EAAA6G,WAAA6I,EAAApP,IAEA,CAGAsG,EAAAiL,UAAA7R,EAAAgQ,KAAAN,EAAApP,IACAsG,EAAA+J,WAAA3Q,EAAAwG,UAAAxB,EAAAc,IAAAS,YAAAK,EAAA+J,WACA/J,EAAAwF,MAAAC,EAGArM,EAAAwG,WAAAI,EAAAE,OAAAF,EAAAE,MAAA8J,aACAhK,EAAAE,MAAA8J,aAAAO,aAAA7K,eAAA+F,EAAArH,EAAAc,IAAAS,aACaK,EAAAE,QACbF,EAAAE,MAAAqK,aAAA9E,GAIA,IAAA2D,EAAAhQ,EAAAgQ,KAAAN,EAAApP,IAEA8P,EAAA,MADApQ,EAAAsM,QAAA1F,EAAA0F,SAAA,GAAAtM,EAAAsM,QAAA1F,EAAA0F,SAAA,QAAA0D,GACAjM,KAAAsM,IAAAzJ,EAAAwF,QAGApM,EAAA8M,WAAA4C,EAAApP,KAAAsG,EAAAmE,UACA/K,EAAAiR,YAAAvB,EAAApP,IACAN,EAAA8M,WAAA4C,EAAApP,IAAA4K,WAAAlL,EAAA4P,OAAAmB,KAAA/Q,EAAA4G,GAAAwJ,IAGApQ,EAAAqL,MAAA,OAAAzE,EAAAiJ,KAQA,OAAA7P,GAWAgQ,KAAA,WACA,IAEAA,EAAAN,EAFA1P,EAAAC,KACAoS,EAAAF,UAIA,OAAAE,EAAA9O,OAEAmM,EAAA1P,EAAA8K,QAAA,GAAA+E,SACO,OAAAwC,EAAA9O,OAAA,CAEPvD,EAAA0G,eACA4L,QAAAD,EAAA,KACA,EACA3C,EAAAvH,SAAAkK,EAAA,OACSrS,EAAA8K,QAAAvH,SACTmM,EAAA1P,EAAA8K,QAAA,GAAA+E,IACAG,EAAA7J,WAAAkM,EAAA,UAEO,IAAAA,EAAA9O,SACPyM,EAAA7J,WAAAkM,EAAA,IACA3C,EAAAvH,SAAAkK,EAAA,QAIA,YAAA3C,EACA,OAAA1P,EAIA,cAAAA,EAAA6M,OAQA,OAPA7M,EAAA+M,OAAA4B,MACAC,MAAA,OACAC,OAAA,WACA7O,EAAAgQ,KAAAuC,MAAAvS,EAAAqS,MAIArS,EAIA,IAAA4G,EAAA5G,EAAA6G,WAAA6I,GAEA,GAAA9I,EAAA,CACA,sBAAAoJ,MAAA,GAuBS,CACT,GAAAhQ,EAAAwG,UAAA,CACA,IAAAqN,EAAA7T,EAAA8T,QAAApE,GAAA1K,EAAAc,IAAAS,YAAAK,EAAA+J,WAAA,EACAoD,EAAAnN,EAAAiL,UAAAjL,EAAAiL,UAAAjL,EAAAsJ,MAAA,EACA,OAAAtJ,EAAAsJ,OAAA6D,EAAAF,EAAA9P,KAAAsM,IAAAzJ,EAAAwF,QAEA,OAAAxF,EAAAE,MAAAP,YA3BA,IAAAuN,EAAA9T,EAAA8T,QAAApE,GACAoE,GACA9T,EAAA4R,MAAAlC,GAAA,GAIA9I,EAAAsJ,MAAAF,EACApJ,EAAAgJ,QAAA,EACA5P,EAAAiR,YAAAvB,GAGAoE,GACA9T,EAAA0D,KAAAgM,GAAA,IAIA1P,EAAAwG,WAAAI,EAAAE,QACAF,EAAAE,MAAAP,YAAAyJ,GAGAhQ,EAAAqL,MAAA,OAAAqE,GAYA,OAAA1P,GAQA8T,QAAA,SAAApE,GAIA,oBAAAA,EAAA,CACA,IAAA9I,EAJA3G,KAIA4G,WAAA6I,GACA,QAAA9I,MAAAmE,QAIA,QAAAzK,EAAA,EAAmBA,EATnBL,KASmB6K,QAAAvH,OAAuBjD,IAC1C,IAVAL,KAUA6K,QAAAxK,GAAAyK,QACA,SAIA,UAQAoF,SAAA,SAAAT,GACA,IACAS,EADAlQ,KACA2M,UAGAhG,EAJA3G,KAIA4G,WAAA6I,GAKA,OAJA9I,IACAuJ,EANAlQ,KAMAqM,QAAA1F,EAAA0F,SAAA,QAGA6D,GAOArO,MAAA,WACA,OAAA7B,KAAA4M,QAOA5F,OAAA,WAKA,IAJA,IAAAjH,EAAAC,KAGA+T,EAAAhU,EAAA8K,QACAxK,EAAA,EAAmBA,EAAA0T,EAAAzQ,OAAiBjD,IAAA,CAOpC,GALA0T,EAAA1T,GAAAyK,SACA/K,EAAA+R,KAAAiC,EAAA1T,GAAAuP,MAIA7P,EAAAwG,UAEA,kBAAA6C,KAAArE,EAAAO,YAAAP,EAAAO,WAAAyC,aAEAgM,EAAA1T,GAAAwG,MAAA3E,IAAA,0FAIA6R,EAAA1T,GAAAwG,MAAA6D,oBAAA,QAAAqJ,EAAA1T,GAAA2T,UAAA,GACAD,EAAA1T,GAAAwG,MAAA6D,oBAAA3F,EAAAM,cAAA0O,EAAA1T,GAAA4T,SAAA,UAIAF,EAAA1T,GAAAwG,MAGA9G,EAAAiR,YAAA+C,EAAA1T,GAAAuP,KAGA,IAAAsE,EAAAnP,EAAAG,OAAAmN,QAAAtS,GACAmU,GAAA,GACAnP,EAAAG,OAAAiP,OAAAD,EAAA,GAKA,IAAAE,GAAA,EACA,IAAA/T,EAAA,EAAeA,EAAA0E,EAAAG,OAAA5B,OAAwBjD,IACvC,GAAA0E,EAAAG,OAAA7E,GAAAkM,OAAAxM,EAAAwM,KAAA,CACA6H,GAAA,EACA,MAgBA,OAZAC,GAAAD,UACAC,EAAAtU,EAAAwM,MAIAxH,EAAAW,SAAA,EAGA3F,EAAA6M,OAAA,WACA7M,EAAA8K,WACA9K,EAAA,KAEA,MAWAuU,GAAA,SAAA3F,EAAAzB,EAAAuC,EAAAsB,GACA,IACAwD,EADAvU,KACA,MAAA2O,GAMA,MAJA,mBAAAzB,GACAqH,EAAA7F,KAAAqC,GAA4BtB,KAAAvC,KAAA6D,SAA+BtB,KAAAvC,OAJ3DlN,MAiBAwU,IAAA,SAAA7F,EAAAzB,EAAAuC,GACA,IACA8E,EADAvU,KACA,MAAA2O,GACAtO,EAAA,EAQA,GALA,iBAAA6M,IACAuC,EAAAvC,EACAA,EAAA,MAGAA,GAAAuC,EAEA,IAAApP,EAAA,EAAiBA,EAAAkU,EAAAjR,OAAiBjD,IAAA,CAClC,IAAAoU,EAAAhF,IAAA8E,EAAAlU,GAAAoP,GACA,GAAAvC,IAAAqH,EAAAlU,GAAA6M,IAAAuH,IAAAvH,GAAAuH,EAAA,CACAF,EAAAJ,OAAA9T,EAAA,GACA,YAGO,GAAAsO,EAnBP3O,KAqBA,MAAA2O,UACO,CAEP,IAAA+F,EAAA3T,OAAA2T,KAxBA1U,MAyBA,IAAAK,EAAA,EAAiBA,EAAAqU,EAAApR,OAAejD,IAChC,IAAAqU,EAAArU,GAAAgS,QAAA,QAAAsC,MAAAC,QA1BA5U,KA0BA0U,EAAArU,OA1BAL,KA2BA0U,EAAArU,QAKA,OAhCAL,MA0CA+Q,KAAA,SAAApC,EAAAzB,EAAAuC,GAMA,OALAzP,KAGAsU,GAAA3F,EAAAzB,EAAAuC,EAAA,GAHAzP,MAeAoL,MAAA,SAAAuD,EAAAc,EAAAoF,GAKA,IAJA,IACAN,EADAvU,KACA,MAAA2O,GAGAtO,EAAAkU,EAAAjR,OAAA,EAAiCjD,GAAA,EAAMA,IACvCkU,EAAAlU,GAAAoP,IAAA8E,EAAAlU,GAAAoP,QAAA,SAAAd,IACA1D,WAAA,SAAAiC,GACAA,EAAA1M,KAAAR,KAAAyP,EAAAoF,IACW/D,KARX9Q,KAQWuU,EAAAlU,GAAA6M,IAAA,GAGXqH,EAAAlU,GAAA0Q,MAXA/Q,KAYAwU,IAAA7F,EAAA4F,EAAAlU,GAAA6M,GAAAqH,EAAAlU,GAAAoP,KAKA,OAjBAzP,MA0BAoR,WAAA,WACA,IAAArR,EAAAC,KAEA,GAAAD,EAAA+M,OAAAxJ,OAAA,GACA,IAAAwR,EAAA/U,EAAA+M,OAAA,GAGA/M,EAAAgR,KAAA+D,EAAAnG,MAAA,WACA5O,EAAA+M,OAAAiI,QACAhV,EAAAqR,eAGA0D,EAAAlG,SAGA,OAAA7O,GAQA4P,OAAA,SAAAhJ,GACA,IACA2F,EAAA3F,EAAA0F,QAKA,IANArM,KAMAuG,WAAAI,EAAAE,QAAAF,EAAAE,MAAAwK,SAAA1K,EAAAE,MAAAmO,OAAArO,EAAAE,MAAAP,YAAAK,EAAA2J,MAEA,OADArF,WAPAjL,KAOA2P,OAAAmB,KAPA9Q,KAOA2G,GAAA,KAPA3G,KAYA,IAAA+L,KAAApF,EAAAmF,QAZA9L,KAYAqM,QAAAC,GAAA,IAWA,GAvBAtM,KAeAoL,MAAA,MAAAzE,EAAAiJ,MAfA5P,KAkBAuG,WAAAwF,GAlBA/L,KAmBA8R,KAAAnL,EAAAiJ,KAAA,GAAAnM,KAAAkD,EAAAiJ,KAnBA5P,KAuBAuG,WAAAwF,EAAA,CAvBA/L,KAwBAoL,MAAA,OAAAzE,EAAAiJ,KACAjJ,EAAAsJ,MAAAtJ,EAAA0J,QAAA,EACA1J,EAAAiL,UAAA,EACAjL,EAAA+J,WAAA3L,EAAAc,IAAAS,YAEA,IAAA6J,EAAA,KAAAxJ,EAAA2J,MAAA3J,EAAA0J,QAAAvM,KAAAsM,IAAAzJ,EAAAwF,OA7BAnM,KA8BA6M,WAAAlG,EAAAiJ,KAAA3E,WA9BAjL,KA8BA2P,OAAAmB,KA9BA9Q,KA8BA2G,GAAAwJ,GAuBA,OArDAnQ,KAkCAuG,YAAAwF,IACApF,EAAAmE,SAAA,EACAnE,EAAAgJ,QAAA,EACAhJ,EAAAsJ,MAAAtJ,EAAA0J,QAAA,EACA1J,EAAAiL,UAAA,EAtCA5R,KAuCAgR,YAAArK,EAAAiJ,KAvCA5P,KA0CAgS,aAAArL,EAAAE,OAGA9B,EAAAsC,gBA7CArH,KAiDAuG,WAAAwF,GAjDA/L,KAkDA8R,KAAAnL,EAAAiJ,KAlDA5P,MA6DAgR,YAAA,SAAAvB,GAQA,OAPAzP,KAEA6M,WAAA4C,KACAzE,aAHAhL,KAGA6M,WAAA4C,WAHAzP,KAIA6M,WAAA4C,IAJAzP,MAeA4G,WAAA,SAAA6I,GAIA,IAHA,IAGApP,EAAA,EAAmBA,EAHnBL,KAGmB6K,QAAAvH,OAAuBjD,IAC1C,GAAAoP,IAJAzP,KAIA6K,QAAAxK,GAAAuP,IACA,OALA5P,KAKA6K,QAAAxK,GAIA,aAOAwP,eAAA,WACA7P,KAEAiV,SAGA,QAAA5U,EAAA,EAAmBA,EALnBL,KAKmB6K,QAAAvH,OAAuBjD,IAC1C,GANAL,KAMA6K,QAAAxK,GAAAsP,OACA,OAPA3P,KAOA6K,QAAAxK,GAAA6U,QAKA,WAAA5F,EAZAtP,OAkBAiV,OAAA,WACA,IACAE,EADAnV,KACAgM,MACAoJ,EAAA,EACA/U,EAAA,EAGA,KANAL,KAMA6K,QAAAvH,OAAA6R,GAAA,CAKA,IAAA9U,EAAA,EAAeA,EAXfL,KAWe6K,QAAAvH,OAAuBjD,IAXtCL,KAYA6K,QAAAxK,GAAAsP,QACAyF,IAKA,IAAA/U,EAlBAL,KAkBA6K,QAAAvH,OAAA,EAAqCjD,GAAA,EAAMA,IAAA,CAC3C,GAAA+U,GAAAD,EACA,OApBAnV,KAuBA6K,QAAAxK,GAAAsP,SAvBA3P,KAyBAuG,WAzBAvG,KAyBA6K,QAAAxK,GAAAwG,OAzBA7G,KA0BA6K,QAAAxK,GAAAwG,MAAA2D,WAAA,GA1BAxK,KA8BA6K,QAAAsJ,OAAA9T,EAAA,GACA+U,QAUA3O,aAAA,SAAAgJ,GAGA,YAAAA,EAAA,CAEA,IADA,IAAAjJ,KACAnG,EAAA,EAAqBA,EAJrBL,KAIqB6K,QAAAvH,OAAuBjD,IAC5CmG,EAAAkI,KALA1O,KAKA6K,QAAAxK,GAAAuP,KAGA,OAAApJ,EAEA,OAAAiJ,IASAgB,eAAA,SAAA9J,GAsBA,OAlBAA,EAAAE,MAAA8J,aAAA5L,EAAAc,IAAAmE,qBACArD,EAAAE,MAAA8J,aAAA1G,OAAAoK,EAJArU,KAIAuM,MAGA5F,EAAA0O,QACA1O,EAAAE,MAAA8J,aAAAzG,QAAAvD,EAAA0O,SAEA1O,EAAAE,MAAA8J,aAAAzG,QAAAvD,EAAAE,OAIAF,EAAAE,MAAA8J,aAAA5E,KAAApF,EAAAmF,MACAnF,EAAAmF,QACAnF,EAAAE,MAAA8J,aAAA+C,UAAA/M,EAAA0J,QAAA,EACA1J,EAAAE,MAAA8J,aAAAgD,QAAAhN,EAAA2J,OAEA3J,EAAAE,MAAA8J,aAAAO,aAAA7K,eAAAM,EAAAwF,MAAApH,EAAAc,IAAAS,aAnBAtG,MA6BAgS,aAAA,SAAAzB,GAGA,GAAAxL,EAAA4E,eAAA,CACA4G,EAAAI,aAAApG,QAAA,KACAgG,EAAAI,aAAAnG,WAAA,GACA,IAAa+F,EAAAI,aAAA1G,OAAAlF,EAAA4E,eAAoD,MAAAnC,KAIjE,OAFA+I,EAAAI,aAAA,KAPA3Q,OAoBA,IAAAsP,EAAA,SAAAgG,GACAtV,KAAAuV,QAAAD,EACAtV,KAAA8E,QAEAwK,EAAA9N,WAKAsD,KAAA,WACA,IACA0Q,EADAxV,KACAuV,QAqBA,OAtBAvV,KAIAmF,OAAAqQ,EAAArQ,OAJAnF,KAKA8L,MAAA0J,EAAA1J,MALA9L,KAMAoF,QAAAoQ,EAAApQ,QANApF,KAOAmM,MAAAqJ,EAAArJ,MAPAnM,KAQAiQ,MAAA,EARAjQ,KASA8K,SAAA,EATA9K,KAUA2P,QAAA,EAVA3P,KAWAqM,QAAA,YAXArM,KAcA4P,MAAA7K,EAAAC,SAGAwQ,EAAA3K,QAAA6D,KAjBA1O,WAoBAyV,SApBAzV,MA6BAyV,OAAA,WACA,IACAD,EADAxV,KACAuV,QACAvP,EAAAjB,EAAAI,QAFAnF,KAEAmF,QAFAnF,KAEAuV,QAAApQ,OAAA,EAFAnF,KAEAoF,QA4BA,OA1BAoQ,EAAAjP,WAJAvG,KAMA6G,WAAA,IAAA9B,EAAAc,IAAA6P,WAAA3Q,EAAAc,IAAA8P,iBAAA5Q,EAAAc,IAAA6P,aANA1V,KAOA6G,MAAAT,KAAAC,eAAAL,EAAAjB,EAAAc,IAAAS,aAPAtG,KAQA6G,MAAAwK,QAAA,EARArR,KASA6G,MAAAqD,QAAAnF,EAAAU,cATAzF,KAWA6G,MAAA,IAAAS,MAXAtH,KAcAgU,SAdAhU,KAcA4V,eAAA9E,KAdA9Q,WAeA6G,MAAA8D,iBAAA,QAfA3K,KAeAgU,UAAA,GAfAhU,KAkBAiU,QAlBAjU,KAkBA6V,cAAA/E,KAlBA9Q,WAmBA6G,MAAA8D,iBAAA5F,EAAAM,cAnBArF,KAmBAiU,SAAA,GAnBAjU,KAsBA6G,MAAA3E,IAAAsT,EAAAjJ,KAtBAvM,KAuBA6G,MAAAtE,QAAA,OAvBAvC,KAwBA6G,MAAAb,SAAAjB,EAAAiB,SAxBAhG,KA2BA6G,MAAAgI,QA3BA7O,MAqCAkV,MAAA,WACA,IACAM,EADAxV,KACAuV,QAgBA,OAjBAvV,KAIAmF,OAAAqQ,EAAArQ,OAJAnF,KAKA8L,MAAA0J,EAAA1J,MALA9L,KAMAoF,QAAAoQ,EAAApQ,QANApF,KAOAmM,MAAAqJ,EAAArJ,MAPAnM,KAQAiQ,MAAA,EARAjQ,KASA4R,UAAA,EATA5R,KAUA8K,SAAA,EAVA9K,KAWA2P,QAAA,EAXA3P,KAYAqM,QAAA,YAZArM,KAeA4P,MAAA7K,EAAAC,SAfAhF,MAuBA4V,eAAA,WACA5V,KAGAuV,QAAAnK,MAAA,YAHApL,KAGA4P,IAHA5P,KAGA6G,MAAA0E,MAHAvL,KAGA6G,MAAA0E,MAAAuK,KAAA,GAHA9V,KAMA6G,MAAA6D,oBAAA,QANA1K,KAMAgU,UAAA,IAMA6B,cAAA,WACA,IACAL,EADAxV,KACAuV,QAGAC,EAAA7I,UAAA7I,KAAAiS,KAAA,GAJA/V,KAIA6G,MAAAqJ,UAAA,GAGA,IAAAnP,OAAA2T,KAAAc,EAAAnJ,SAAA/I,SACAkS,EAAAnJ,SAA0B2J,WAAA,MAAAR,EAAA7I,aAG1B,WAAA6I,EAAA5I,SACA4I,EAAA5I,OAAA,SACA4I,EAAApK,MAAA,QACAoK,EAAApE,cAdApR,KAkBA6G,MAAA6D,oBAAA3F,EAAAM,cAlBArF,KAkBAiU,SAAA,KAOA,IAAAI,KAMA9E,EAAA,SAAAxP,GACA,IAAA+O,EAAA/O,EAAAwM,KAGA,GAAA8H,EAAAvF,GAOA,OALA/O,EAAA4M,UAAA0H,EAAAvF,GAAAoB,cAGA+F,EAAAlW,GAKA,yBAAqBqJ,KAAA0F,GAAA,CAIrB,IAFA,IAAAoH,EAAAC,KAAArH,EAAA3G,MAAA,SACAiO,EAAA,IAAAC,WAAAH,EAAA5S,QACAjD,EAAA,EAAmBA,EAAA6V,EAAA5S,SAAejD,EAClC+V,EAAA/V,GAAA6V,EAAAI,WAAAjW,GAGAkW,EAAAH,EAAAnM,OAAAlK,OACK,CAEL,IAAAyW,EAAA,IAAAC,eACAD,EAAAE,KAAA,MAAA5H,GAAA,GACA0H,EAAAG,gBAAA5W,EAAA0M,oBACA+J,EAAAI,aAAA,cACAJ,EAAAlJ,OAAA,WAEA,IAAAwI,GAAAU,EAAAK,OAAA,OACA,MAAAf,GAAA,MAAAA,GAAA,MAAAA,EAKAS,EAAAC,EAAAM,SAAA/W,GAJAA,EAAAqL,MAAA,2DAAAoL,EAAAK,OAAA,MAMAL,EAAAO,QAAA,WAEAhX,EAAAwG,YACAxG,EAAA6L,QAAA,EACA7L,EAAAwG,WAAA,EACAxG,EAAA8K,kBACAwJ,EAAAvF,GACA/O,EAAA8O,SAGAmI,EAAAR,KAQAQ,EAAA,SAAAR,GACA,IACAA,EAAAS,OACK,MAAAzP,GACLgP,EAAAO,YASAR,EAAA,SAAAW,EAAAnX,GAEAgF,EAAAc,IAAA0Q,gBAAAW,EAAA,SAAAjN,GACAA,GAAAlK,EAAA8K,QAAAvH,OAAA,IACA+Q,EAAAtU,EAAAwM,MAAAtC,EACAgM,EAAAlW,EAAAkK,KAEK,WACLlK,EAAAqL,MAAA,mDASA6K,EAAA,SAAAlW,EAAAkK,GAEAA,IAAAlK,EAAA4M,YACA5M,EAAA4M,UAAA1C,EAAAiG,UAIA,IAAAnP,OAAA2T,KAAA3U,EAAAsM,SAAA/I,SACAvD,EAAAsM,SAAsB2J,WAAA,MAAAjW,EAAA4M,aAItB,WAAA5M,EAAA6M,SACA7M,EAAA6M,OAAA,SACA7M,EAAAqL,MAAA,QACArL,EAAAqR,eAOAjL,EAAA,WAEA,IACA,oBAAAgR,aACApS,EAAAc,IAAA,IAAAsR,aACO,oBAAAC,mBACPrS,EAAAc,IAAA,IAAAuR,mBAEArS,EAAAY,eAAA,EAEK,MAAA6B,GACLzC,EAAAY,eAAA,EAKA,IAAA0R,EAAA,iBAAAjO,KAAArE,EAAAO,YAAAP,EAAAO,WAAAgS,UACAC,EAAAxS,EAAAO,YAAAP,EAAAO,WAAAiS,WAAAvP,MAAA,0BACAwP,EAAAD,EAAArP,SAAAqP,EAAA,YACA,GAAAF,GAAAG,KAAA,GACA,IAAAC,EAAA,SAAArO,KAAArE,EAAAO,YAAAP,EAAAO,WAAAyC,UAAAkH,gBACAlK,EAAAO,YAAAP,EAAAO,WAAAoS,aAAAD,GAAA1S,EAAAO,aAAAP,EAAAO,WAAAoS,aAAAD,KACA1S,EAAAY,eAAA,GAKAZ,EAAAY,gBACAZ,EAAAU,gBAAA,IAAAV,EAAAc,IAAA6P,WAAA3Q,EAAAc,IAAA8P,iBAAA5Q,EAAAc,IAAA6P,aACA3Q,EAAAU,WAAAW,KAAAC,eAAAtB,EAAAI,OAAA,IAAAJ,EAAAc,IAAAS,aACAvB,EAAAU,WAAAyE,QAAAnF,EAAAc,IAAAsE,cAIApF,EAAAgB,eAUKyG,KALL5H,EAAA,WACA,OACAG,SACAsG,SAEKiH,MAAA5S,SAAAC,EAAAD,QAAAkF,GAKLlF,EAAAqF,SACArF,EAAA2L,OAIA,oBAAA9F,QACAA,OAAAV,eACAU,OAAAR,SACAQ,OAAA8F,OACA9F,OAAA+J,cACG,IAAAqI,IACHA,EAAA9S,eACA8S,EAAA5S,SACA4S,EAAAtM,OACAsM,EAAArI,SAjtEA,GAkuEA,WAEA,aA6GA,IAAAsI,EA1GA/S,aAAArD,UAAAqW,MAAA,OACAhT,aAAArD,UAAAsW,cAAA,cAWAjT,aAAArD,UAAAuW,OAAA,SAAAC,GAIA,IAHAhY,KAGA6F,MAHA7F,KAGA6F,IAAA6L,SACA,OAJA1R,KAQA,QAAAK,EARAL,KAQAkF,OAAA5B,OAAA,EAAoCjD,GAAA,EAAMA,IAR1CL,KASAkF,OAAA7E,GAAA0X,OAAAC,GAGA,OAZAhY,MAuBA6E,aAAArD,UAAAyW,IAAA,SAAAC,EAAAC,EAAAC,GAIA,OAHApY,KAGA6F,KAHA7F,KAGA6F,IAAA6L,UAKAyG,EAAA,iBAAAA,EARAnY,KAQA6X,KAAA,GAAAM,EACAC,EAAA,iBAAAA,EATApY,KASA6X,KAAA,GAAAO,EAEA,iBAAAF,EAXAlY,KAeA6X,MAfA7X,KAYA6X,MAAAK,EAAAC,EAAAC,GAZApY,KAaA6F,IAAA6L,SAAA2G,YAbArY,KAaA6X,KAAA,GAbA7X,KAaA6X,KAAA,GAbA7X,KAaA6X,KAAA,IAbA7X,aAmCA6E,aAAArD,UAAA8W,YAAA,SAAAJ,EAAAC,EAAAC,EAAAG,EAAAC,EAAAC,GAIA,IAHAzY,KAGA6F,MAHA7F,KAGA6F,IAAA6L,SACA,OAJA1R,KAQA,IAAA0Y,EARA1Y,KAQA8X,aAOA,OANAK,EAAA,iBAAAA,EAAAO,EAAA,GAAAP,EACAC,EAAA,iBAAAA,EAAAM,EAAA,GAAAN,EACAG,EAAA,iBAAAA,EAAAG,EAAA,GAAAH,EACAC,EAAA,iBAAAA,EAAAE,EAAA,GAAAF,EACAC,EAAA,iBAAAA,EAAAC,EAAA,GAAAD,EAEA,iBAAAP,EAIAQ,GAnBA1Y,KAgBA8X,cAAAI,EAAAC,EAAAC,EAAAG,EAAAC,EAAAC,GAhBAzY,KAiBA6F,IAAA6L,SAAAiH,eAAAT,EAAAC,EAAAC,EAAAG,EAAAC,EAAAC,GAjBAzY,OAiCAqL,KAAA7J,UAAAsD,MAAA8S,EA2BGvM,KAAA7J,UAAAsD,KA1BH,SAAAhE,GAwBA,OAvBAd,KAGA8X,aAAAhX,EAAAwX,cAAA,OAHAtY,KAIA4Y,QAAA9X,EAAAiX,QAAA,KAJA/X,KAKA6X,KAAA/W,EAAAmX,KAAA,KALAjY,KAMA6Y,aACAC,oBAAA,IAAAhY,EAAAgY,eAAAhY,EAAAgY,eAAA,IACAC,oBAAA,IAAAjY,EAAAiY,eAAAjY,EAAAiY,eAAA,IACAC,mBAAA,IAAAlY,EAAAkY,cAAAlY,EAAAkY,cAAA,EACAC,mBAAA,IAAAnY,EAAAmY,cAAAnY,EAAAmY,cAAA,UACAC,iBAAA,IAAApY,EAAAoY,YAAApY,EAAAoY,YAAA,IACAC,kBAAA,IAAArY,EAAAqY,aAAArY,EAAAqY,aAAA,OACAC,iBAAA,IAAAtY,EAAAsY,YAAAtY,EAAAsY,YAAA,EACAC,mBAAA,IAAAvY,EAAAuY,cAAAvY,EAAAuY,cAAA,GAdArZ,KAkBAsZ,UAAAxY,EAAAyY,WAAsCrM,GAAApM,EAAAyY,cAlBtCvZ,KAmBAwZ,OAAA1Y,EAAA2Y,QAAgCvM,GAAApM,EAAA2Y,WAnBhCzZ,KAoBA0Z,eAAA5Y,EAAA6Y,gBAAgDzM,GAAApM,EAAA6Y,mBAGhD/B,EAAApX,KAAAR,KAAAc,KAUAuK,KAAA7J,UAAAuW,OAAA,SAAAC,EAAAvI,GACA,IAAA1P,EAAAC,KAGA,IAAAD,EAAAwG,UACA,OAAAxG,EAIA,cAAAA,EAAA6M,OAQA,OAPA7M,EAAA+M,OAAA4B,MACAC,MAAA,SACAC,OAAA,WACA7O,EAAAgY,OAAAC,EAAAvI,MAIA1P,EAIA,IAAA6Z,OAAA,IAAA7U,OAAAc,IAAAgU,mBAAA,mBAGA,YAAApK,EAAA,CAEA,oBAAAuI,EAIA,OAAAjY,EAAA6Y,QAHA7Y,EAAA6Y,QAAAZ,EACAjY,EAAA8X,MAAAG,EAAA,KAQA,IADA,IAAAxR,EAAAzG,EAAA0G,aAAAgJ,GACApP,EAAA,EAAiBA,EAAAmG,EAAAlD,OAAcjD,IAAA,CAE/B,IAAAsG,EAAA5G,EAAA6G,WAAAJ,EAAAnG,IAEA,GAAAsG,EAAA,CACA,oBAAAqR,EAsBA,OAAArR,EAAAiS,QArBAjS,EAAAiS,QAAAZ,EACArR,EAAAkR,MAAAG,EAAA,KAEArR,EAAAE,QAEAF,EAAAkS,YAAAM,aAAA,aAGAxS,EAAA0O,SAAA1O,EAAA0O,QAAA2C,KACA8B,EAAAnT,EAAAiT,GAGA,YAAAA,EACAjT,EAAA0O,QAAAgD,YAAAL,EAAA,KAEArR,EAAA0O,QAAA2C,IAAA3R,eAAA2R,EAAAjT,OAAAc,IAAAS,cAIAvG,EAAAqL,MAAA,SAAAzE,EAAAiJ,MAOA,OAAA7P,GAWAsL,KAAA7J,UAAAyW,IAAA,SAAAC,EAAAC,EAAAC,EAAA3I,GACA,IAAA1P,EAAAC,KAGA,IAAAD,EAAAwG,UACA,OAAAxG,EAIA,cAAAA,EAAA6M,OAQA,OAPA7M,EAAA+M,OAAA4B,MACAC,MAAA,MACAC,OAAA,WACA7O,EAAAkY,IAAAC,EAAAC,EAAAC,EAAA3I,MAIA1P,EAQA,GAJAoY,EAAA,iBAAAA,EAAA,EAAAA,EACAC,EAAA,iBAAAA,GAAA,GAAAA,OAGA,IAAA3I,EAAA,CAEA,oBAAAyI,EAGA,OAAAnY,EAAA8X,KAFA9X,EAAA8X,MAAAK,EAAAC,EAAAC,GAQA,IADA,IAAA5R,EAAAzG,EAAA0G,aAAAgJ,GACApP,EAAA,EAAiBA,EAAAmG,EAAAlD,OAAcjD,IAAA,CAE/B,IAAAsG,EAAA5G,EAAA6G,WAAAJ,EAAAnG,IAEA,GAAAsG,EAAA,CACA,oBAAAuR,EAcA,OAAAvR,EAAAkR,KAbAlR,EAAAkR,MAAAK,EAAAC,EAAAC,GAEAzR,EAAAE,QAEAF,EAAA0O,UAAA1O,EAAA0O,QAAA2C,KACA8B,EAAAnT,EAAA,WAGAA,EAAA0O,QAAAgD,YAAAH,EAAAC,EAAAC,IAGArY,EAAAqL,MAAA,MAAAzE,EAAAiJ,MAOA,OAAA7P,GAaAsL,KAAA7J,UAAA8W,YAAA,SAAAJ,EAAAC,EAAAC,EAAA3I,GACA,IAAA1P,EAAAC,KAGA,IAAAD,EAAAwG,UACA,OAAAxG,EAIA,cAAAA,EAAA6M,OAQA,OAPA7M,EAAA+M,OAAA4B,MACAC,MAAA,cACAC,OAAA,WACA7O,EAAAuY,YAAAJ,EAAAC,EAAAC,EAAA3I,MAIA1P,EAQA,GAJAoY,EAAA,iBAAAA,EAAApY,EAAA+X,aAAA,GAAAK,EACAC,EAAA,iBAAAA,EAAArY,EAAA+X,aAAA,GAAAM,OAGA,IAAA3I,EAAA,CAEA,oBAAAyI,EAGA,OAAAnY,EAAA+X,aAFA/X,EAAA+X,cAAAI,EAAAC,EAAAC,GAQA,IADA,IAAA5R,EAAAzG,EAAA0G,aAAAgJ,GACApP,EAAA,EAAiBA,EAAAmG,EAAAlD,OAAcjD,IAAA,CAE/B,IAAAsG,EAAA5G,EAAA6G,WAAAJ,EAAAnG,IAEA,GAAAsG,EAAA,CACA,oBAAAuR,EAmBA,OAAAvR,EAAAmR,aAlBAnR,EAAAmR,cAAAI,EAAAC,EAAAC,GAEAzR,EAAAE,QAEAF,EAAA0O,UAEA1O,EAAAkR,OACAlR,EAAAkR,KAAA9X,EAAA8X,OAAA,UAGAiC,EAAAnT,EAAA,YAGAA,EAAA0O,QAAAsD,eAAAT,EAAAC,EAAAC,IAGArY,EAAAqL,MAAA,cAAAzE,EAAAiJ,MAOA,OAAA7P,GAiCAsL,KAAA7J,UAAAuY,WAAA,WACA,IAEAjZ,EAAA2O,EAAA9I,EADAyL,EAAAF,UAIA,IALAlS,KAKAuG,UACA,OANAvG,KAUA,OAAAoS,EAAA9O,OAEA,OAZAtD,KAYA6Y,YACK,OAAAzG,EAAA9O,OAAA,CACL,oBAAA8O,EAAA,GAgCA,OADAzL,EA7CA3G,KA6CA4G,WAAAsB,SAAAkK,EAAA,SACAzL,EAAAkS,YA9CA7Y,KA8CA6Y,YA/BA/X,EAAAsR,EAAA,QAGA,IAAA3C,IACA3O,EAAAiZ,aACAjZ,EAAAiZ,YACAjB,eAAAhY,EAAAgY,eACAC,eAAAjY,EAAAiY,eACAC,cAAAlY,EAAAkY,cACAC,cAAAnY,EAAAmY,cACAC,YAAApY,EAAAoY,YACAE,YAAAtY,EAAAsY,YACAC,cAAAvY,EAAAuY,cACAF,aAAArY,EAAAqY,eA5BAnZ,KAgCA6Y,aACAC,oBAAA,IAAAhY,EAAAiZ,WAAAjB,eAAAhY,EAAAiZ,WAAAjB,eAjCA9Y,KAiCAga,gBACAjB,oBAAA,IAAAjY,EAAAiZ,WAAAhB,eAAAjY,EAAAiZ,WAAAhB,eAlCA/Y,KAkCAia,gBACAjB,mBAAA,IAAAlY,EAAAiZ,WAAAf,cAAAlY,EAAAiZ,WAAAf,cAnCAhZ,KAmCAka,eACAjB,mBAAA,IAAAnY,EAAAiZ,WAAAd,cAAAnY,EAAAiZ,WAAAd,cApCAjZ,KAoCAma,eACAjB,iBAAA,IAAApY,EAAAiZ,WAAAb,YAAApY,EAAAiZ,WAAAb,YArCAlZ,KAqCAoa,aACAhB,iBAAA,IAAAtY,EAAAiZ,WAAAX,YAAAtY,EAAAiZ,WAAAX,YAtCApZ,KAsCAqa,aACAhB,mBAAA,IAAAvY,EAAAiZ,WAAAV,cAAAvY,EAAAiZ,WAAAV,cAvCArZ,KAuCAsa,eACAnB,kBAAA,IAAArY,EAAAiZ,WAAAZ,aAAArY,EAAAiZ,WAAAZ,aAxCAnZ,KAwCAua,qBAQK,IAAAnI,EAAA9O,SACLxC,EAAAsR,EAAA,GACA3C,EAAAvH,SAAAkK,EAAA,QAKA,IADA,IAAA5L,EAtDAxG,KAsDAyG,aAAAgJ,GACApP,EAAA,EAAiBA,EAAAmG,EAAAlD,OAAcjD,IAG/B,GAFAsG,EAxDA3G,KAwDA4G,WAAAJ,EAAAnG,IAEA,CAEA,IAAAma,EAAA7T,EAAAkS,YACA2B,GACA1B,oBAAA,IAAAhY,EAAAgY,eAAAhY,EAAAgY,eAAA0B,EAAA1B,eACAC,oBAAA,IAAAjY,EAAAiY,eAAAjY,EAAAiY,eAAAyB,EAAAzB,eACAC,mBAAA,IAAAlY,EAAAkY,cAAAlY,EAAAkY,cAAAwB,EAAAxB,cACAC,mBAAA,IAAAnY,EAAAmY,cAAAnY,EAAAmY,cAAAuB,EAAAvB,cACAC,iBAAA,IAAApY,EAAAoY,YAAApY,EAAAoY,YAAAsB,EAAAtB,YACAE,iBAAA,IAAAtY,EAAAsY,YAAAtY,EAAAsY,YAAAoB,EAAApB,YACAC,mBAAA,IAAAvY,EAAAuY,cAAAvY,EAAAuY,cAAAmB,EAAAnB,cACAF,kBAAA,IAAArY,EAAAqY,aAAArY,EAAAqY,aAAAqB,EAAArB,cAIA,IAAAsB,EAAA9T,EAAA0O,QACAoF,GACAA,EAAA3B,eAAA0B,EAAA1B,eACA2B,EAAA1B,eAAAyB,EAAAzB,eACA0B,EAAAzB,cAAAwB,EAAAxB,cACAyB,EAAAxB,cAAAuB,EAAAvB,cACAwB,EAAAvB,YAAAsB,EAAAtB,YACAuB,EAAArB,YAAAoB,EAAApB,YACAqB,EAAApB,cAAAmB,EAAAnB,cACAoB,EAAAtB,aAAAqB,EAAArB,eAGAxS,EAAAkR,OACAlR,EAAAkR,KAtFA7X,KAsFA6X,OAAA,UAIAiC,EAAAnT,EAAA,YAKA,OA/FA3G,MA0GAsP,MAAA9N,UAAAsD,KAAA,SAAA8S,GACA,kBACA,IACApC,EADAxV,KACAuV,QADAvV,KAIA8X,aAAAtC,EAAAsC,aAJA9X,KAKA4Y,QAAApD,EAAAoD,QALA5Y,KAMA6X,KAAArC,EAAAqC,KANA7X,KAOA6Y,YAAArD,EAAAqD,YAGAjB,EAAApX,KAAAR,MAVAA,KAaA4Y,QACApD,EAAAuC,OAdA/X,KAcA4Y,SAdA5Y,KAeO6X,MACPrC,EAAAyC,IAhBAjY,KAgBA6X,KAAA,GAhBA7X,KAgBA6X,KAAA,GAhBA7X,KAgBA6X,KAAA,GAhBA7X,KAgBA4P,MAlBA,CAqBGN,MAAA9N,UAAAsD,MAOHwK,MAAA9N,UAAA0T,MAAA,SAAA0C,GACA,kBACA,IACApC,EADAxV,KACAuV,QAQA,OATAvV,KAIA8X,aAAAtC,EAAAsC,aAJA9X,KAKA6X,KAAArC,EAAAqC,KALA7X,KAMA6Y,YAAArD,EAAAqD,YAGAjB,EAAApX,KAAAR,OAXA,CAaGsP,MAAA9N,UAAA0T,OAUH,IAAA4E,EAAA,SAAAnT,EAAA+T,GAIA,aAHAA,KAAA,YAIA/T,EAAA0O,QAAAtQ,OAAAc,IAAA8U,eACAhU,EAAA0O,QAAAyD,eAAAnS,EAAAkS,YAAAC,eACAnS,EAAA0O,QAAA0D,eAAApS,EAAAkS,YAAAE,eACApS,EAAA0O,QAAA2D,cAAArS,EAAAkS,YAAAG,cACArS,EAAA0O,QAAA4D,cAAAtS,EAAAkS,YAAAI,cACAtS,EAAA0O,QAAA6D,YAAAvS,EAAAkS,YAAAK,YACAvS,EAAA0O,QAAA+D,YAAAzS,EAAAkS,YAAAO,YACAzS,EAAA0O,QAAAgE,cAAA1S,EAAAkS,YAAAQ,cACA1S,EAAA0O,QAAA8D,aAAAxS,EAAAkS,YAAAM,aACAxS,EAAA0O,QAAAgD,YAAA1R,EAAAkR,KAAA,GAAAlR,EAAAkR,KAAA,GAAAlR,EAAAkR,KAAA,IACAlR,EAAA0O,QAAAsD,eAAAhS,EAAAmR,aAAA,GAAAnR,EAAAmR,aAAA,GAAAnR,EAAAmR,aAAA,MAEAnR,EAAA0O,QAAAtQ,OAAAc,IAAAgU,qBACAlT,EAAA0O,QAAA2C,IAAA3R,eAAAM,EAAAiS,QAAA7T,OAAAc,IAAAS,cAGAK,EAAA0O,QAAAnL,QAAAvD,EAAAE,OAGAF,EAAAmE,SACAnE,EAAA4O,QAAA5D,MAAAhL,EAAAiJ,KAAA,GAAAnM,KAAAkD,EAAAiJ,KAAA,IAnkBA,iCC5uEA,IAAAgL,EAGAA,EAAA,WACA,OAAA5a,KADA,GAIA,IAEA4a,KAAAC,SAAA,cAAAA,KAAA,EAAAC,MAAA,QACC,MAAAtT,GAED,iBAAAjC,SACAqV,EAAArV,QAOA5F,EAAAD,QAAAkb,mBCpBAjb,EAAAD,QAAAS,EAAAuB,EAAA,uCCAA/B,EAAAD,QAAAS,EAAAuB,EAAA,uCCAA/B,EAAAD,QAAAS,EAAAuB,EAAA,uCCAA/B,EAAAD,QAAAS,EAAAuB,EAAA,uCCAA/B,EAAAD,QAAAS,EAAAuB,EAAA,uCCAA/B,EAAAD,QAAAS,EAAAuB,EAAA,uCCAA/B,EAAAD,QAAAS,EAAAuB,EAAA,uCCAA/B,EAAAD,QAAAS,EAAAuB,EAAA,uCCAA/B,EAAAD,QAAAS,EAAAuB,EAAA","file":"react-pro-metronome.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactProMetronome\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"ReactProMetronome\"] = factory(root[\"React\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 36168429397f1b2fab9e","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Howl } from 'howler'\n\nimport click3SoundFileMP3 from './sounds/click3.mp3'\nimport click3SoundFileOGG from './sounds/click3.ogg'\nimport click3SoundFileAAC from './sounds/click3.aac'\n\nimport click2SoundFileMP3 from './sounds/click2.mp3'\nimport click2SoundFileOGG from './sounds/click2.ogg'\nimport click2SoundFileAAC from './sounds/click2.aac'\n\nimport click1SoundFileMP3 from './sounds/click1.mp3'\nimport click1SoundFileOGG from './sounds/click1.ogg'\nimport click1SoundFileAAC from './sounds/click1.aac'\n\nconst MAXBPM = 300\nconst MAXSUBDIVISION = 8\n\nclass ProMetronome extends PureComponent {\n  state = {\n    qNote: 1,\n    subNote: 1\n  }\n\n  clickSounds = [\n    new Howl({\n      src: [click1SoundFileMP3, click1SoundFileOGG, click1SoundFileAAC],\n      preload: true\n    }),\n    new Howl({\n      src: [click2SoundFileMP3, click2SoundFileOGG, click2SoundFileAAC],\n      preload: true\n    }),\n    new Howl({\n      src: [click3SoundFileMP3, click3SoundFileOGG, click3SoundFileAAC],\n      preload: true\n    })\n  ]\n\n  update = () => {\n    const { soundEnabled, soundPattern, subdivision } = this.props\n    const { qNote, subNote } = this.state\n\n    if (soundEnabled && soundPattern.length === 4 * subdivision) {\n      const soundLevel = soundPattern.charAt(\n        (qNote - 1) * subdivision + subNote - 1\n      )\n      if (soundLevel > 0 && soundLevel <= 3)\n        this.clickSounds[soundLevel - 1].play()\n    }\n\n    if (subNote < subdivision) {\n      this.setState(prevState => ({\n        subNote: prevState.subNote + 1\n      }))\n    } else {\n      this.setState(prevState => ({\n        qNote: prevState.qNote === 4 ? 1 : prevState.qNote + 1,\n        subNote: 1\n      }))\n    }\n  }\n\n  calculateInterval = (bpm, subdivision) => {\n    return Math.floor(60000 / (bpm * subdivision))\n  }\n\n  componentDidMount() {\n    if (this.props.isPlaying) {\n      this.timerID = setInterval(\n        this.update,\n        this.calculateInterval(this.props.bpm, this.props.subdivision)\n      )\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.isPlaying != this.props.isPlaying) {\n      if (nextProps.isPlaying) {\n        this.timerID = setInterval(\n          this.update,\n          this.calculateInterval(nextProps.bpm, nextProps.subdivision)\n        )\n      } else {\n        clearInterval(this.timerID)\n      }\n    } else if (\n      nextProps.isPlaying &&\n      (nextProps.bpm != this.props.bpm ||\n        nextProps.subdivision != this.props.subdivision)\n    ) {\n      clearInterval(this.timerID)\n      this.timerID = setInterval(\n        this.update,\n        this.calculateInterval(nextProps.bpm, nextProps.subdivision)\n      )\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID)\n  }\n\n  render() {\n    return this.props.render(this.props, this.state)\n  }\n}\n\nProMetronome.propTypes = {\n  bpm: function(props, propName, componentName) {\n    if (props[propName]) {\n      const propValue = props[propName],\n        propType = typeof propValue\n      if (propType !== 'number')\n        return new Error(\n          'Invalid prop `' +\n            propName +\n            '` of type `' +\n            propType +\n            '` supplied to ' +\n            componentName +\n            ', expected `number`.'\n        )\n      if (propValue < 1 || propValue > MAXBPM)\n        return new Error(\n          'Invalid prop `' +\n            propName +\n            '` with value ' +\n            propValue +\n            ' supplied to ' +\n            componentName +\n            '. Allowed range is 1-' +\n            MAXBPM +\n            '.'\n        )\n    }\n  },\n  subdivision: function(props, propName, componentName) {\n    if (props[propName]) {\n      const propValue = props[propName],\n        propType = typeof propValue\n      if (propType !== 'number')\n        return new Error(\n          'Invalid prop `' +\n            propName +\n            '` of type `' +\n            propType +\n            '` supplied to ' +\n            componentName +\n            ', expected `number`.'\n        )\n      if (propValue < 1 || propValue > MAXSUBDIVISION)\n        return new Error(\n          'Invalid prop `' +\n            propName +\n            '` with value ' +\n            propValue +\n            ' supplied to ' +\n            componentName +\n            '. Allowed range is 1-' +\n            MAXSUBDIVISION +\n            '.'\n        )\n    }\n  },\n  isPlaying: PropTypes.bool,\n  soundEnabled: PropTypes.bool,\n  soundPattern: function(props, propName, componentName) {\n    if (props[propName]) {\n      const propValue = props[propName],\n        propType = typeof propValue\n      if (propType !== 'string')\n        return new Error(\n          'Invalid prop `' +\n            propName +\n            '` of type `' +\n            propType +\n            '` supplied to ' +\n            componentName +\n            ', expected `string`.'\n        )\n      if (propValue.length > 0 && propValue.length !== 4 * props['subdivision'])\n        return new Error(\n          'Invalid prop `' +\n            propName +\n            '` with length ' +\n            propValue.length +\n            ' supplied to ' +\n            componentName +\n            \". Length value doesn't match with the subdivision, expected \" +\n            4 * props['subdivision'] +\n            '.'\n        )\n    }\n  },\n  render: PropTypes.func.isRequired\n}\n\nProMetronome.defaultProps = {\n  bpm: 80,\n  subdivision: 1,\n  isPlaying: true,\n  soundEnabled: false,\n  soundPattern: ''\n}\n\nexport default ProMetronome\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}\n// module id = 2\n// module chunks = 0","/*!\n *  howler.js v2.0.8\n *  howlerjs.com\n *\n *  (c) 2013-2018, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto iOS enabler.\n      self.mobileAutoEnable = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'running' : 'running';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Mobile browsers will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _enableMobileAudio: function() {\n      var self = this || Howler;\n\n      // Only run this on mobile devices if audio isn't already eanbled.\n      var isMobile = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(self._navigator && self._navigator.userAgent);\n      var isTouch = !!(('ontouchend' in window) || (self._navigator && self._navigator.maxTouchPoints > 0) || (self._navigator && self._navigator.msMaxTouchPoints > 0));\n      if (self._mobileEnabled || !self.ctx || (!isMobile && !isTouch)) {\n        return;\n      }\n\n      self._mobileEnabled = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function() {\n        // Fix Android can not play in suspend state.\n        Howler._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._mobileEnabled = true;\n          self.mobileAutoEnable = false;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n        self.ctx.suspend().then(function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        });\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhrWithCredentials = o.xhrWithCredentials || false;\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio on iOS.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.mobileAutoEnable) {\n        Howler._enableMobileAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload) {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        var num = 0;\n        for (var i=0; i<self._sounds.length; i++) {\n          if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n            num++;\n            id = self._sounds[i]._id;\n          }\n        }\n\n        if (num === 1) {\n          sprite = null;\n        } else {\n          id = null;\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Makr this sounded as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          setTimeout(function() {\n            self._emit('play', sound._id);\n          }, 0);\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n      // Update the parameters of the sound\n      sound._paused = false;\n      sound._ended = false;\n      sound._sprite = sprite;\n      sound._seek = seek;\n      sound._start = self._sprite[sprite][0] / 1000;\n      sound._stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running') {\n          playWebAudio();\n        } else {\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Mobile browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (typeof Promise !== 'undefined' && play instanceof Promise) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Releases the lock and executes queued actions.\n              play.then(function () {\n                self._playLock = false;\n                self._loadQueue();\n              });\n            }\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the new end timer.\n            if (timeout !== Infinity) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            if (!internal) {\n              self._emit('play', sound._id);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState === 4 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded') {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Make sure the volume is in the right bounds.\n        vol = Math.max(0, vol);\n        vol = Math.min(1, vol);\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded') {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            sound._rateSeek = self.seek(id[i]);\n            sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);;\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Restart the playback if the sound was playing.\n          if (playing) {\n            self.play(id, true);\n          }\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node) {\n            sound._node.currentTime = seek;\n          }\n\n          self._emit('seek', id);\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n          if (!checkIE) {\n            sounds[i]._node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n          }\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n\n        // Remove the references in the global Howler object.\n        var index = Howler._howls.indexOf(self);\n        if (index >= 0) {\n          Howler._howls.splice(index, 1);\n        }\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function() {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // don't move onto the next task until this one is done\n        self.once(task.event, function() {\n          self._queue.shift();\n          self._loadQueue();\n        });\n\n        task.action();\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        clearTimeout(self._endTimers[id]);\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n\n      if (Howler._scratchBuffer) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n      }\n      node.bufferSource = null;\n\n      return self;\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else {\n        self._node = new Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = 'auto';\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.withCredentials = self._xhrWithCredentials;\n      xhr.responseType = 'arraybuffer';\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Decode the buffer into an audio source.\n    Howler.ctx.decodeAudioData(arraybuffer, function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      }\n    }, function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    });\n  };\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : 1, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Define globally in case AMD is not available or unused.\n  if (typeof window !== 'undefined') {\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.0.8\n *  howlerjs.com\n *\n *  (c) 2013-2018, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n  \n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n      self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n      self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              sound._panner.setPosition(pan, 0, 0);\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            sound._panner.setPosition(x, y, z);\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            sound._panner.setOrientation(x, y, z);\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   * \n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n      sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/howler/dist/howler.js\n// module id = 3\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 4\n// module chunks = 0","module.exports = __webpack_public_path__ + \"click3.b9c0e1f8.mp3\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sounds/click3.mp3\n// module id = 5\n// module chunks = 0","module.exports = __webpack_public_path__ + \"click3.5cc40ee0.ogg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sounds/click3.ogg\n// module id = 6\n// module chunks = 0","module.exports = __webpack_public_path__ + \"click3.a923ce2d.aac\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sounds/click3.aac\n// module id = 7\n// module chunks = 0","module.exports = __webpack_public_path__ + \"click2.af2efb74.mp3\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sounds/click2.mp3\n// module id = 8\n// module chunks = 0","module.exports = __webpack_public_path__ + \"click2.882a5158.ogg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sounds/click2.ogg\n// module id = 9\n// module chunks = 0","module.exports = __webpack_public_path__ + \"click2.f700dd1d.aac\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sounds/click2.aac\n// module id = 10\n// module chunks = 0","module.exports = __webpack_public_path__ + \"click1.d217c31b.mp3\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sounds/click1.mp3\n// module id = 11\n// module chunks = 0","module.exports = __webpack_public_path__ + \"click1.d8e2f3b9.ogg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sounds/click1.ogg\n// module id = 12\n// module chunks = 0","module.exports = __webpack_public_path__ + \"click1.8befe78b.aac\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sounds/click1.aac\n// module id = 13\n// module chunks = 0"],"sourceRoot":""}